CREATE TABLE marketplace_user (
    user_id     VARCHAR2(40),
    password    VARCHAR2(40)    NOT NULL,
    PRIMARY KEY (user_id)
);

CREATE TABLE marketplace_admin (
    user_id     VARCHAR2(40),
    PRIMARY KEY (user_id),
    FOREIGN KEY (user_id) REFERENCES marketplace_user (user_id)
);

CREATE TABLE brand (
    user_id     VARCHAR2(40),
    address     VARCHAR2(40)    NOT NULL,
    join_date   DATE            NOT NULL,
    name        VARCHAR2(40)    NOT NULL,
    PRIMARY KEY (user_id),
    FOREIGN KEY (user_id) REFERENCES marketplace_user (user_id)
);

CREATE TABLE customer (
    user_id     VARCHAR2(40),
    address     VARCHAR2(40)    NOT NULL,
    name        VARCHAR2(40)    NOT NULL,
    phone       NUMBER(10)      NOT NULL,
    wallet_id   VARCHAR2(40)    NOT NULL,
    PRIMARY KEY (user_id),
    FOREIGN KEY (user_id) REFERENCES marketplace_user (user_id)
);

CREATE TABLE loyalty_program (
    code        VARCHAR2(40),
    brand_guid  VARCHAR2(40)    NOT NULL UNIQUE,
    name        VARCHAR2(40)    NOT NULL,
    status      VARCHAR2(40),
    type        VARCHAR2(12)    NOT NULL CONSTRAINT valid_lp_type CHECK (type = 'tiered' OR type = 'regular'),
    PRIMARY KEY (code),
    FOREIGN KEY (brand_guid) REFERENCES brand (user_id)
);

CREATE TABLE tier (
    lp_code         VARCHAR2(40),
    name            VARCHAR2(40)    NOT NULL,
    tier_level      INTEGER         CONSTRAINT level_valid CHECK (tier_level >= 0 AND tier_level <= 2),
    multiplier      INTEGER         NOT NULL,
    points_required INTEGER         NOT NULL,
    PRIMARY KEY (lp_code, tier_level),
    FOREIGN KEY (lp_code) REFERENCES loyalty_program (code)
);

CREATE TABLE customer_enrollment (
    customer_id     VARCHAR2(40),
    lp_code         VARCHAR2(40),
    num_points      INTEGER CONSTRAINT num_points_nonnegative CHECK (num_points >= 0),
    tier_level      INTEGER,
    CONSTRAINT customer_already_enrolled PRIMARY KEY (customer_id, lp_code),
    FOREIGN KEY (customer_id) REFERENCES customer (user_id),
    FOREIGN KEY (lp_code) REFERENCES loyalty_program (code)
);

CREATE TABLE reward_category (
    reward_category_code    VARCHAR2(40),
    name                    VARCHAR2(40)    NOT NULL,
    PRIMARY KEY (reward_category_code)
);

CREATE TABLE lp_reward_category (
    reward_category_code    VARCHAR2(40),
    lp_code                 VARCHAR2(40),
    PRIMARY KEY (reward_category_code, lp_code),
    FOREIGN KEY (reward_category_code) REFERENCES reward_category,
    FOREIGN KEY (lp_code) REFERENCES loyalty_program (code)
);

CREATE TABLE reward (
    reward_id               INTEGER,
    lp_code                 VARCHAR2(40),
    reward_category_code    VARCHAR2(40),
    num_instances           INTEGER    CONSTRAINT num_instances_nonnegative CHECK (num_instances >= 0),
    PRIMARY KEY (reward_id, lp_code),
    FOREIGN KEY (lp_code) REFERENCES loyalty_program (code),
    FOREIGN KEY (reward_category_code) REFERENCES reward_category
);

CREATE TABLE gift_card (
    reward_id   INTEGER,
    lp_code     VARCHAR2(40),
    amount      NUMBER  NOT NULL,
    expiry_date DATE    NOT NULL,
    PRIMARY KEY (reward_id, lp_code),
    FOREIGN KEY (reward_id, lp_code) REFERENCES reward ON DELETE CASCADE
);

CREATE TABLE free_product (
    reward_id       INTEGER,
    lp_code         VARCHAR2(40),
    product_name    VARCHAR2(40),
    PRIMARY KEY (reward_id, lp_code),
    FOREIGN KEY (reward_id, lp_code) REFERENCES reward ON DELETE CASCADE
);

CREATE TABLE redeemed_reward (
    customer_id         VARCHAR2(40),
    reward_id           INTEGER,
    lp_code             VARCHAR2(40),
    num_instances       INTEGER     NOT NULL,
    num_points          INTEGER     NOT NULL,
    reward_date         DATE,
    nth_time_on_date    INTEGER,
    PRIMARY KEY (customer_id, reward_id, lp_code, reward_date, nth_time_on_date),
    FOREIGN KEY (customer_id) REFERENCES customer (user_id),
    FOREIGN KEY (reward_id, lp_code) REFERENCES reward
);

CREATE TABLE activity_category (
    activity_category_code  VARCHAR2(40),
    name                    VARCHAR2(40)    NOT NULL,
    PRIMARY KEY (activity_category_code)
);

CREATE TABLE lp_activity_category (
    activity_category_code  VARCHAR2(40),
    lp_code                 VARCHAR2(40),
    PRIMARY KEY (activity_category_code, lp_code),
    FOREIGN KEY (activity_category_code) REFERENCES activity_category,
    FOREIGN KEY (lp_code) REFERENCES loyalty_program (code)
);

CREATE TABLE activity (
    activity_id             INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    activity_category_code  VARCHAR2(40)    NOT NULL,
    activity_date           DATE            NOT NULL,
    customer_id             VARCHAR2(40)    NOT NULL,
    PRIMARY KEY (activity_id),
    FOREIGN KEY (customer_id) REFERENCES customer (user_id),
    FOREIGN KEY (activity_category_code) REFERENCES activity_category
);

CREATE TABLE purchase (
    activity_id     INTEGER,
    amount          NUMBER      NOT NULL,
    PRIMARY KEY (activity_id),
    FOREIGN KEY (activity_id) REFERENCES activity
);

CREATE TABLE review (
    activity_id             INTEGER,
    content                 VARCHAR2(40)    NOT NULL,
    PRIMARY KEY (activity_id),
    FOREIGN KEY (activity_id) REFERENCES activity
);

CREATE TABLE friend_reference (
    activity_id             INTEGER,
    PRIMARY KEY (activity_id),
    FOREIGN KEY (activity_id) REFERENCES activity
);

CREATE TABLE reward_rule (
    rule_code       VARCHAR2(6),
    lp_code         VARCHAR2(40),
    num_points      INTEGER,
    version         NUMBER(3),
    CONSTRAINT reward_rule_pk PRIMARY KEY (rule_code, lp_code, version),
    FOREIGN KEY (lp_code) REFERENCES loyalty_program (code)
);

CREATE TABLE reward_earning_rule (
    rule_code               VARCHAR2(6),
    lp_code                 VARCHAR2(40),
    activity_category_code  VARCHAR2(40),
    version                 NUMBER(3),
    PRIMARY KEY (rule_code, lp_code, version),
    FOREIGN KEY (rule_code, lp_code, version) REFERENCES reward_rule,
    FOREIGN KEY (activity_category_code) REFERENCES activity_category
);

CREATE TABLE reward_redeeming_rule (
    rule_code               VARCHAR2(6),
    lp_code                 VARCHAR2(40),
    reward_category_code    VARCHAR2(40),
    version                 NUMBER(3),
    PRIMARY KEY (rule_code, lp_code, version),
    FOREIGN KEY (rule_code, lp_code, version) REFERENCES reward_rule,
    FOREIGN KEY (reward_category_code) REFERENCES reward_category
);

CREATE TABLE wallet_activity (
    activity_id     INTEGER,
    points          INTEGER         NOT NULL,
    re_rule_code    VARCHAR2(6)     NOT NULL,
    re_rule_version NUMBER(3),
    lp_code         VARCHAR2(40),
    wallet_id       VARCHAR2(40),
    PRIMARY KEY (activity_id),
    FOREIGN KEY (activity_id) REFERENCES activity,
    FOREIGN KEY (re_rule_code, lp_code, re_rule_version) REFERENCES reward_earning_rule (rule_code, lp_code, version),
    FOREIGN KEY (lp_code) REFERENCES loyalty_program (code)
);


-- autoset which position this redeemed_reward was redeemed on a certain day
CREATE OR REPLACE TRIGGER autoset_redeemed_reward_nth_time_on_date
BEFORE INSERT ON redeemed_reward
FOR EACH ROW

DECLARE n INTEGER;

BEGIN
    IF :new.nth_time_on_date IS NULL
    THEN
        SELECT MAX(nth_time_on_date) INTO n
        FROM redeemed_reward
        WHERE customer_id = :new.customer_id
            AND reward_id = :new.reward_id
            AND lp_code = :new.lp_code
            AND reward_date = :new.reward_date;

        IF n IS NULL
        THEN
            n := 0;
        END IF;

        n := n + 1;
        :new.nth_time_on_date := n;
    END IF;
END;
/


-- autoupdate num_points and tier_status
CREATE OR REPLACE TRIGGER update_customer_enrollment_on_redemption
AFTER INSERT ON redeemed_reward
FOR EACH ROW

BEGIN
    UPDATE  customer_enrollment
    SET     num_points = num_points - :new.num_points
    WHERE   customer_id = :new.customer_id 
    AND     lp_code = :new.lp_code;
END;
/


-- autoupdate num_instances on reward after redemption
CREATE OR REPLACE TRIGGER update_reward_num_instances_on_redemption
AFTER INSERT ON redeemed_reward
FOR EACH ROW

BEGIN
    UPDATE  reward
    SET     num_instances = num_instances - :new.num_instances
    WHERE   reward_id = :new.reward_id 
    AND     lp_code = :new.lp_code;
END;
/


CREATE OR REPLACE TRIGGER set_rule_code_on_activity
BEFORE INSERT ON wallet_activity
FOR EACH ROW
DECLARE
    this_activity_category_code VARCHAR2(40);
    rule_code_applied VARCHAR2(6);
    reward_rule_version NUMBER(3);

BEGIN
    SELECT activity_category_code INTO this_activity_category_code
    FROM activity
    WHERE activity_id = :new.activity_id;

    SELECT R.rule_code, R.version INTO rule_code_applied, reward_rule_version
    FROM reward_rule R
    WHERE R.lp_code = :new.lp_code AND R.rule_code IN (
        SELECT RER.rule_code
        FROM reward_earning_rule RER
        WHERE RER.activity_category_code = this_activity_category_code
    ) AND R.version = (
        SELECT MAX(R2.version)
        FROM reward_rule R2
        WHERE R2.rule_code = R.rule_code
    );

    :new.re_rule_code := rule_code_applied;
    :new.re_rule_version := reward_rule_version;
END;
/


CREATE OR REPLACE TRIGGER update_customer_enrollment_on_activity
BEFORE INSERT ON wallet_activity
FOR EACH ROW
DECLARE
    activity_customer_id VARCHAR2(40); 
    curr_tier_level INTEGER;
    curr_multiplier INTEGER;
    num_points_awarded INTEGER;
    this_activity_category_code VARCHAR2(40);
    lp_type VARCHAR2(12);
    new_tier_level INTEGER;
    curr_num_points INTEGER;

BEGIN
    SELECT user_id INTO activity_customer_id
    FROM customer
    WHERE wallet_id = :new.wallet_id;

    SELECT activity_category_code INTO this_activity_category_code
    FROM activity
    WHERE activity_id = :new.activity_id;

    SELECT R.num_points INTO num_points_awarded
    FROM reward_rule R
    WHERE R.lp_code = :new.lp_code AND R.rule_code IN (
        SELECT RER.rule_code
        FROM reward_earning_rule RER
        WHERE RER.activity_category_code = this_activity_category_code
    ) AND R.version = (
        SELECT MAX(R2.version)
        FROM reward_rule R2
        WHERE R2.rule_code = R.rule_code
    );

    SELECT tier_level INTO new_tier_level
    FROM customer_enrollment
    WHERE customer_id = activity_customer_id AND lp_code = :new.lp_code;

    SELECT type INTO lp_type
    FROM loyalty_program
    WHERE code = :new.lp_code;

    IF lp_type = 'tiered'
    THEN
        SELECT tier_level, num_points INTO curr_tier_level, curr_num_points
        FROM customer_enrollment
        WHERE customer_id = activity_customer_id AND lp_code = :new.lp_code;

        SELECT multiplier INTO curr_multiplier
        FROM tier
        WHERE lp_code = :new.lp_code AND tier_level = curr_tier_level;

        num_points_awarded := num_points_awarded * curr_multiplier;

        SELECT MIN(tier_level) INTO new_tier_level
        FROM tier
        WHERE lp_code = :new.lp_code AND points_required <= curr_num_points + num_points_awarded;
    END IF;

    :new.points := num_points_awarded;

    UPDATE  customer_enrollment
    SET     num_points = num_points + num_points_awarded,
            tier_level = new_tier_level
    WHERE   customer_id = activity_customer_id
    AND     lp_code = :new.lp_code;
END;
/


-- set version number automatically on updates to reward rules
CREATE OR REPLACE TRIGGER autoset_reward_version 
BEFORE INSERT ON reward_rule
FOR EACH ROW

DECLARE next_version NUMBER(3);

BEGIN
    IF  :new.version IS NULL
    THEN
        SELECT MAX(version) INTO next_version
        FROM reward_rule
        WHERE lp_code = :new.lp_code;

        :new.version := next_version + 1;
    END IF;
END;
/

-- set version number automatically on updates to reward earning rules
CREATE OR REPLACE TRIGGER autoset_re_reward_version 
BEFORE INSERT ON reward_earning_rule
FOR EACH ROW

DECLARE next_version NUMBER(3);

BEGIN
    SELECT MAX(version) INTO next_version
    FROM reward_rule
    WHERE rule_code = :new.rule_code AND lp_code = :new.lp_code;

    :new.version := next_version;
END;
/

-- set version number automatically on updates to reward redeeming rules
CREATE OR REPLACE TRIGGER autoset_rr_reward_version 
BEFORE INSERT ON reward_redeeming_rule
FOR EACH ROW

DECLARE next_version NUMBER(3);

BEGIN
    SELECT MAX(version) INTO next_version
    FROM reward_rule
    WHERE rule_code = :new.rule_code AND lp_code = :new.lp_code;

    :new.version := next_version;
END;
/
